#BlueJ class context
comment0.target=LinkedListStud
comment0.text=\n\ Write\ a\ description\ of\ class\ LinkedListStud\ here.\n\n\ @author\ (your\ name)\n\ @version\ (a\ version\ number\ or\ a\ date)\n
comment1.params=
comment1.target=LinkedListStud()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ LinkedListStud\n
comment10.params=first
comment10.target=double\ worstGpaRec(LinkedListStud.Node)
comment10.text=\n\ Recursively\ search\ for\ the\ worst\ GPA\ in\ the\ list\n\ @param\ \ \ first\ The\ starting\ point\ in\ a\ linked\ list\ from\ which\ to\ iterate\ from\n\ @return\ \ The\ lowest\ GPA\ in\ the\ list\n
comment11.params=first
comment11.target=java.util.ArrayList\ honorsStudentsRec(LinkedListStud.Node)
comment11.text=\n\ Recusively\ creates\ an\ ArrayList\ of\ all\ honors\ students\n\ @param\ \ \ first\ The\ starting\ point\ in\ a\ linked\ list\ from\ which\ to\ iterate\ from\n\ @return\ \ An\ ArrayList\ of\ Student\ objects\n
comment2.params=
comment2.target=LinkedListStud.Node\ getList()
comment2.text=\n\ Returns\ reference\ to\ head\ of\ the\ list\n\ @return\ \ the\ head\ of\ the\ list\n
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=\n\ Checks\ to\ see\ if\ the\ list\ is\ empty\n\ @return\ true\ or\ false\n
comment4.params=s
comment4.target=void\ addFront(Student)
comment4.text=\n\ Appends\ students\ to\ head\ of\ the\ list\n\ @param\ \ \ s\ Student\ object\ to\ be\ appended\ to\ the\ front\n
comment5.params=s
comment5.target=void\ addTail(Student)
comment5.text=\n\ Appends\ student\ to\ end\ of\ the\ list\n\ @param\ \ \ s\ The\ student\ object\ to\ be\ appended\ to\ the\ end\ of\ the\ list\n
comment6.params=
comment6.target=void\ printLinkedList()
comment6.text=\n\ Prints\ string\ representation\ for\ each\ student\ in\ the\ list\ on\ a\ new\ line\ to\ standard\ output\n
comment7.params=
comment7.target=Student\ bestStudent()
comment7.text=\n\ Finds\ the\ student\ with\ the\ best\ GPA\n\ @return\ \ Student\ object\ with\ the\ best\ GPA\n
comment8.params=
comment8.target=java.util.ArrayList\ honorsStudents()
comment8.text=\n\ Creates\ an\ ArrayList\ containing\ all\ honor\ students\n\ @return\ An\ ArrayList\ of\ Student\ objects\n
comment9.params=first
comment9.target=void\ printListRec(LinkedListStud.Node)
comment9.text=\n\ Recursively\ prints\ string\ representation\ for\ each\ student\ in\ the\ list\ on\ a\ new\ line\ to\ standard\ output\n\ @param\ \ \ first\ The\ starting\ point\ in\ a\ linked\ list\ from\ which\ to\ iterate\ from\n
numComments=12
